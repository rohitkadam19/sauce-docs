{"remainingRequest":"/Users/nancysweeney/GH/sauce-docs/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/nancysweeney/GH/sauce-docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/nancysweeney/GH/sauce-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/nancysweeney/GH/sauce-docs/docs/basics/best-practices/imperative-declarative-testing.md","dependencies":[{"path":"/Users/nancysweeney/GH/sauce-docs/docs/basics/best-practices/imperative-declarative-testing.md","mtime":1612378019099},{"path":"/Users/nancysweeney/GH/sauce-docs/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-basics-best-practices-imperative-declarative-testing-md-dd3.json","mtime":1614090092231},{"path":"/Users/nancysweeney/GH/sauce-docs/node_modules/cache-loader/dist/cjs.js","mtime":1602877854626},{"path":"/Users/nancysweeney/GH/sauce-docs/node_modules/babel-loader/lib/index.js","mtime":1605895626604},{"path":"/Users/nancysweeney/GH/sauce-docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1613152382570},{"path":"/Users/nancysweeney/GH/sauce-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1613152382276}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL25hbmN5c3dlZW5leS9HSC9zYXVjZS1kb2NzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgUmVhY3QgZnJvbSdyZWFjdCc7aW1wb3J0e21keH1mcm9tJ0BtZHgtanMvcmVhY3QnO2V4cG9ydCBjb25zdCBmcm9udE1hdHRlcj17aWQ6J2ltcGVyYXRpdmUtZGVjbGFyYXRpdmUtdGVzdGluZycsdGl0bGU6J0ltcGVyYXRpdmUgYW5kIERlY2xhcmF0aXZlIFRlc3RpbmcnLHNpZGViYXJfbGFiZWw6J0ltcGVyYXRpdmUgYW5kIERlY2xhcmF0aXZlIFRlc3RpbmcnfTtleHBvcnQgY29uc3QgbWV0YWRhdGE9eyJ1bnZlcnNpb25lZElkIjoiYmFzaWNzL2Jlc3QtcHJhY3RpY2VzL2ltcGVyYXRpdmUtZGVjbGFyYXRpdmUtdGVzdGluZyIsImlkIjoiYmFzaWNzL2Jlc3QtcHJhY3RpY2VzL2ltcGVyYXRpdmUtZGVjbGFyYXRpdmUtdGVzdGluZyIsImlzRG9jc0hvbWVQYWdlIjpmYWxzZSwidGl0bGUiOiJJbXBlcmF0aXZlIGFuZCBEZWNsYXJhdGl2ZSBUZXN0aW5nIiwiZGVzY3JpcHRpb24iOiJJbXBlcmF0aXZlIHZlcnN1cyBkZWNsYXJhdGl2ZSB0ZXN0IHNjZW5hcmlvcyBpcyBhIGNvbmNlcHQgdGhhdCBpcyBvZnRlbiBkaXNjdXNzZWQgaW4gdGhlIGNvbnRleHQgb2YgQ3VjdW1iZXIgYW5kIEJlaGF2aW9yIERyaXZlbiBEZXZlbG9wbWVudCAoQkREKSwgYnV0IGl0IGlzIGFwcGxpY2FibGUgdG8gYWxsIGxhbmd1YWdlcyBhbmQgdGVzdCBydW5uZXJzLiAoRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgQ3VjdW1iZXIsIHNlZSBBc2xhayBIZWxsZXPDuHkncyBcIlRoZSB0cmFpbmluZyB3aGVlbHMgY2FtZSBvZmZcIikiLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL2Jhc2ljcy9iZXN0LXByYWN0aWNlcy9pbXBlcmF0aXZlLWRlY2xhcmF0aXZlLXRlc3RpbmcubWQiLCJzbHVnIjoiL2Jhc2ljcy9iZXN0LXByYWN0aWNlcy9pbXBlcmF0aXZlLWRlY2xhcmF0aXZlLXRlc3RpbmciLCJwZXJtYWxpbmsiOiIvYmFzaWNzL2Jlc3QtcHJhY3RpY2VzL2ltcGVyYXRpdmUtZGVjbGFyYXRpdmUtdGVzdGluZyIsImVkaXRVcmwiOiJodHRwczovL2dpdGh1Yi5jb20vc2F1Y2VsYWJzL3NhdWNlLWRvY3MvZWRpdC9tYXN0ZXIvZG9jcy9iYXNpY3MvYmVzdC1wcmFjdGljZXMvaW1wZXJhdGl2ZS1kZWNsYXJhdGl2ZS10ZXN0aW5nLm1kIiwidmVyc2lvbiI6ImN1cnJlbnQiLCJsYXN0VXBkYXRlZEJ5IjoiTGF1cmEgVGhvbWFzIiwibGFzdFVwZGF0ZWRBdCI6MTYwOTg3NTg4Niwic2lkZWJhcl9sYWJlbCI6IkltcGVyYXRpdmUgYW5kIERlY2xhcmF0aXZlIFRlc3RpbmcifTsvKiBAanN4UnVudGltZSBjbGFzc2ljICovIC8qIEBqc3ggbWR4ICovZXhwb3J0IGNvbnN0IHRvYz1bXTtjb25zdCBsYXlvdXRQcm9wcz17dG9jfTtjb25zdCBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoe2NvbXBvbmVudHMsLi4ucHJvcHN9KXtyZXR1cm4gbWR4KE1EWExheW91dCxfZXh0ZW5kcyh7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoInAiLG51bGwsYEltcGVyYXRpdmUgdmVyc3VzIGRlY2xhcmF0aXZlIHRlc3Qgc2NlbmFyaW9zIGlzIGEgY29uY2VwdCB0aGF0IGlzIG9mdGVuIGRpc2N1c3NlZCBpbiB0aGUgY29udGV4dCBvZiBgLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL2N1Y3VtYmVyLmlvLyJ9KSxgQ3VjdW1iZXJgKSxgIGFuZCBgLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CZWhhdmlvci1kcml2ZW5fZGV2ZWxvcG1lbnQifSksYEJlaGF2aW9yIERyaXZlbiBEZXZlbG9wbWVudCAoQkREKWApLGAsIGJ1dCBpdCBpcyBhcHBsaWNhYmxlIHRvIGFsbCBsYW5ndWFnZXMgYW5kIHRlc3QgcnVubmVycy4gKEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IEN1Y3VtYmVyLCBzZWUgQXNsYWsgSGVsbGVzw7h5J3MgImAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHBzOi8vYXNsYWtoZWxsZXNveS5jb20vcG9zdC8xMTA1NTk4MTIyMi90aGUtdHJhaW5pbmctd2hlZWxzLWNhbWUtb2ZmIn0pLGBUaGUgdHJhaW5pbmcgd2hlZWxzIGNhbWUgb2ZmYCksYCIpYCksbWR4KCJwIixudWxsLGBJbXBlcmF0aXZlIHRlc3Rpbmcgb3IgcHJvZ3JhbW1pbmcgaXMgZXNzZW50aWFsbHkgc3BlbGxpbmcgb3V0IHdpdGggYXMgbXVjaCBkZXRhaWwgYXMgbmVjZXNzYXJ5IGhvdyB0byBhY2NvbXBsaXNoIHNvbWV0aGluZy4KRGVjbGFyYXRpdmUgdGVzdGluZyBvciBwcm9ncmFtbWluZyBpcyBvbmx5IHNwZWNpZnlpbmcgKG9yIGRlY2xhcmluZykgd2hhdCBuZWVkcyB0byBiZSBhY2NvbXBsaXNoZWQuClRoaXMgaXMgc2VlbiBhY3V0ZWx5IGluIEJERCBjaXJjbGVzIGJlY2F1c2UgdGhlIGdvYWwgb2YgQkREIGlzIHRvIGdldCBhbGwgb2YgdGhlIGludGVyZXN0ZWQgcGFydGllcyAoUHJvamVjdCwgRGV2LCBUZXN0LCBCdXNpbmVzcywgZXRjLikgdG8gY29sbGFib3JhdGUgb24gdGhlIHJlcXVpcmVtZW50cyBvZiBhIGZlYXR1cmUgYmVmb3JlIGFueW9uZSBiZWdpbnMgd29ya2luZyBvbiB0aGUgaW1wbGVtZW50YXRpb24uIE1hbnkgdGVzdGVycyBoYXZlIGxhdGNoZWQgb24gdG8gQkREIHRvb2xzIGFzIGdsb3JpZmllZCB0ZXN0IHJ1bm5lcnMgcmF0aGVyIHRoYW4gYSB3YXkgdG8gYWN0dWFsbHkgZmFjaWxpdGF0ZSBCREQgcHJhY3RpY2VzLiBUaGlzIHJlc3VsdHMgaW4gZmVhdHVyZXMgdGhhdCBpbmNsdWRlIGFjdHVhbCBjb2RlIGFuZCBkYXRhIHN0cnVjdHVyZXMuIExlc3MgcHJvYmxlbWF0aWMsIGJ1dCBzdGlsbCB1c3VhbGx5IG1pc3NpbmcgdGhlIHBvaW50LCBpcyBhIGhlYXZ5IHJlbGlhbmNlIG9uIGltcGVyYXRpdmUgc2NlbmFyaW9zLiBGb3IgZXhhbXBsZTpgKSxtZHgoIm9sIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LGBHaXZlbiBJIG9wZW4gYSBicm93c2VyYCksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sYEFuZCBJIG5hdmlnYXRlIHRvIGh0dHA6Ly9gLG1keCgic3BhbiIsbnVsbCksYGV4YW1wbGUuY29tL2xvZ2luYCksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sYFdoZW4gSSB0eXBlIGluIHRoZSB1c2VybmFtZSBmaWVsZCBib2I5N2ApLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LGBBbmQgSSB0eXBlIGluIHRoZSBwYXNzd29yZCBmaWVsZCBGMWQwYCksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sYEFuZCBJIGNsaWNrIHRoZSBTdWJtaXQgYnV0dG9uYCksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sYFRoZW4gSSBzaG91bGQgc2VlIHRoZSBtZXNzYWdlIFdlbGNvbWUgQmFjayBCb2JgKSksbWR4KCJwIixudWxsLGBUaGlzIHNjZW5hcmlvIGlzIG5vdCBmb2N1c2VkIHNvbGVseSBvbiB0aGUgYnVzaW5lc3MgcmVxdWlyZW1lbnRzLCBhbmQgYWN0dWFsbHkgbmVlZHMgdG8gaGF2ZSBrbm93bGVkZ2UtaW1wbGVtZW50YXRpb24tc3BlY2lmaWMgZGV0YWlscyBpbiBvcmRlciB0byB3b3JrLiBUaGUgZmFjdCB0aGF0IHRoZSB1c2Vy4oCZcyB1c2VybmFtZSBpcyBib2I5NyBoYXMgbm90aGluZyB0byBkbyB3aXRoIHRoZSBidXNpbmVzcyByZXF1aXJlbWVudHMgb2YgdGhlIGNvbXBhbnkuIElmIEJERCBmZWF0dXJlcyBhcmUgZGVzaWduZWQgdG8gcmVwcmVzZW50IHRoZSBidXNpbmVzcyBsb2dpYywgdGhlbiB0aGV5IHNob3VsZCBvbmx5IGJlIGNoYW5nZWQgaWYgdGhlIGJ1c2luZXNzIHJlcXVpcmVtZW50cyBjaGFuZ2UuIElmIGJvYjk3IGNoYW5nZWQgaGlzIHBhc3N3b3JkIHRvIDE8M015RDBnLCB0aGUgcGFnZSBsb2NhdGlvbiBjaGFuZ2VzLCBvciB0aGUgc3VjY2VzcyBtZXNzYWdlIGNoYW5nZXMsIHRoaXMgdGVzdCB3b3VsZCBmYWlsLCBldmVuIHRob3VnaCB0aGUgYnVzaW5lc3MgbmVlZHMgYXJlIGV4YWN0bHkgdGhlIHNhbWUuYCksbWR4KCJwIixudWxsLGBBIGRlY2xhcmF0aXZlIGV4YW1wbGUgb2YgdGhlIHNhbWUgZnVuY3Rpb25hbGl0eSBsb29rcyBsaWtlIHRoaXM6YCksbWR4KCJvbCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSxgR2l2ZW4gSSBhbSBvbiB0aGUgTG9naW4gcGFnZWApLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LGBXaGVuIEkgc2lnbiBpbiB3aXRoIGNvcnJlY3QgY3JlZGVudGlhbHNgKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSxgVGhlbiBJIHNob3VsZCBzZWUgYSB3ZWxjb21lIG1lc3NhZ2VgKSksbWR4KCJwIixudWxsLGBUaGlzIGlzIGFsbCBpbmZvcm1hdGlvbiB0aGF0IHRoZSBidXNpbmVzcyBjYXJlcyBhYm91dCwgaXMgZWFzaWVyIHRvIHJlYWQsIGFuZCBsZWF2ZXMgaXQgdG8gdGhlIGltcGxlbWVudGF0aW9uIHRvIHNwZWNpZnkgaG93IGEgc3VjY2Vzc2Z1bCBsb2dpbiBpcyBhY2NvbXBsaXNoZWQuYCksbWR4KCJwIixudWxsLGBUaGlzIHByaW5jaXBsZSBjYW4gYmUgYXBwbGllZCB0byBhbnkgbGFuZ3VhZ2Ugb3IgdGVzdCBydW5uZXIuIFRlc3RzIHNob3VsZCBsYXJnZWx5IGZvY3VzIG9uIHdoYXQgbmVlZHMgdG8gYmUgYWNjb21wbGlzaGVkLCBub3QgdGhlIGRldGFpbHMgb2YgaG93IGl0IGlzIGRvbmUuIFRoZXkgc2hvdWxkIG1vc3RseSBiZSB1bmRlcnN0YW5kYWJsZSB3aGVuIHJlYWQgYnkgbm9uLWRldmVsb3BlcnMuIFRoaXMgYXBwcm9hY2ggZ29lcyB2ZXJ5IHdlbGwgd2l0aCB1c2luZyB0aGUgcGFnZSBvYmplY3QgbWV0aG9kb2xvZ3kgKFNlZSBgLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL21hcnRpbmZvd2xlci5jb20vYmxpa2kvUGFnZU9iamVjdC5odG1sIn0pLGBQYWdlT2JqZWN0YCksYCBmb3IgbW9yZSBpbmZvcm1hdGlvbi4pLiBLZWVwIHRoZSBidXNpbmVzcyBsb2dpYyBpbiB0aGUgdGVzdCwgYW5kIHB1dCBhbGwgb2YgdGhlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBkcml2ZXJzLCB0aGUgZWxlbWVudCBsb2NhdG9ycywgdGhlIHRpbWluZywgZXRjLiwgaW4gdGhlIHBhZ2Ugb2JqZWN0LmApKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},null]}