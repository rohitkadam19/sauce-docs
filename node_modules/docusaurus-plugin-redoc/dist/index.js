"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOptions = void 0;
const fs_1 = __importDefault(require("fs"));
const yaml_1 = __importDefault(require("yaml"));
const utils_1 = require("@docusaurus/utils");
const options_1 = require("./options");
function redocPlugin(context, opts) {
    const { baseUrl } = context.siteConfig;
    const options = { ...options_1.DEFAULT_OPTIONS, ...opts };
    const { debug, spec, specUrl } = options;
    if (debug) {
        console.error('[REDOCUSAURUS_PLUGIN] Opts Input:', opts);
        console.error('[REDOCUSAURUS_PLUGIN] Options:', options);
    }
    return {
        name: 'docusaurus-plugin-redoc',
        async loadContent() {
            let content = null;
            if (spec) {
                const file = fs_1.default.readFileSync(spec).toString();
                if (spec.endsWith('.yaml') || spec.endsWith('.yml')) {
                    const parsedSpec = yaml_1.default.parse(file);
                    content = parsedSpec;
                }
                else
                    content = JSON.parse(file);
            }
            if (debug) {
                console.error('[REDOCUSAURUS_PLUGIN] Content:', content);
            }
            return content;
        },
        async contentLoaded({ content, actions }) {
            const { createData, addRoute } = actions;
            let specData;
            if (content) {
                specData = await createData(`redocApiSpec-${options.id || '1'}.json`, JSON.stringify({ type: 'object', content }));
            }
            else if (specUrl) {
                specData = await createData(`redocApiSpec-${options.id || '1'}.json`, JSON.stringify({ type: 'url', content: specUrl }));
            }
            else {
                console.error('[Redocusaurus] No spec provided');
                return;
            }
            const path = options.routePath.startsWith('/') ? options.routePath.slice(1) : options.routePath;
            const routeOptions = {
                path: utils_1.normalizeUrl([baseUrl, path]),
                component: options.apiDocComponent,
                modules: {
                    spec: specData,
                },
                exact: true,
            };
            if (debug) {
                console.error("[REDOCUSAURUS_PLUGIN] Route:", routeOptions);
            }
            addRoute(routeOptions);
        },
    };
}
exports.default = redocPlugin;
;
function validateOptions({ options, }) {
    const { value, error } = options_1.PluginOptionSchema.validate(options);
    if (error) {
        throw error;
    }
    return value;
}
exports.validateOptions = validateOptions;
//# sourceMappingURL=index.js.map