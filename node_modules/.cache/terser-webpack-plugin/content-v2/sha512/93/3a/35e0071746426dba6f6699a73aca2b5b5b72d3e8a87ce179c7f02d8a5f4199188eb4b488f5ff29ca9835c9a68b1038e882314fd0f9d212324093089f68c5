{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{203:function(e,t,a){\"use strict\";a.r(t),a.d(t,\"MDXContext\",(function(){return d})),a.d(t,\"MDXProvider\",(function(){return m})),a.d(t,\"mdx\",(function(){return f})),a.d(t,\"useMDXComponents\",(function(){return p})),a.d(t,\"withMDXComponents\",(function(){return u}));var n=a(0),i=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var d=i.a.createContext({}),u=function(e){return function(t){var a=p(t.components);return i.a.createElement(e,s({},t,{components:a}))}},p=function(e){var t=i.a.useContext(d),a=t;return e&&(a=\"function\"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return i.a.createElement(d.Provider,{value:t},e.children)},h={inlineCode:\"code\",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,r=c(e,[\"components\",\"mdxType\",\"originalType\",\"parentName\"]),d=p(a),u=n,m=d[\"\".concat(s,\".\").concat(u)]||d[u]||h[u]||o;return a?i.a.createElement(m,l(l({ref:t},r),{},{components:a})):i.a.createElement(m,l({ref:t},r))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if(\"string\"==typeof e||n){var o=a.length,s=new Array(o);s[0]=b;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType=\"string\"==typeof e?e:n,s[1]=r;for(var c=2;c<o;c++)s[c]=a[c];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,a)}b.displayName=\"MDXCreateElement\"},90:function(e,t,a){\"use strict\";a.r(t),a.d(t,\"frontMatter\",(function(){return s})),a.d(t,\"metadata\",(function(){return r})),a.d(t,\"rightToc\",(function(){return l})),a.d(t,\"default\",(function(){return d}));var n=a(3),i=a(8),o=(a(0),a(203)),s={id:\"real-device-testing\",title:\"Real Device Testing with Espresso and XCUITest\",sidebar_label:\"Real Device Testing\"},r={unversionedId:\"mobile-apps/automated-testing/espresso-xcuitest/real-device-testing\",id:\"mobile-apps/automated-testing/espresso-xcuitest/real-device-testing\",isDocsHomePage:!1,title:\"Real Device Testing with Espresso and XCUITest\",description:\"At the moment, the Sauce Runner is only available for our Legacy Real Device Cloud Platform, therefore all topics in this page do not apply to automated testing with Real Devices in Sauce Labs. Check the Real Device Testing in Sauce Labs Feature Preview for updates on when the Sauce Runner will be available.\",source:\"@site/docs/mobile-apps/automated-testing/espresso-xcuitest/real-device-testing.md\",slug:\"/mobile-apps/automated-testing/espresso-xcuitest/real-device-testing\",permalink:\"/mobile-apps/automated-testing/espresso-xcuitest/real-device-testing\",editUrl:\"https://github.com/saucelabs/sauce-docs/edit/master/docs/mobile-apps/automated-testing/espresso-xcuitest/real-device-testing.md\",version:\"current\",lastUpdatedBy:\"kimsaucelabs\",lastUpdatedAt:1607037055,sidebar_label:\"Real Device Testing\",sidebar:\"someSidebar\",previous:{title:\"Automated Testing with WebdriverIO\",permalink:\"/mobile-apps/automated-testing/wdio\"},next:{title:\"Virtual Device Testing with Espresso\",permalink:\"/mobile-apps/automated-testing/espresso-xcuitest/virtual-device-testing\"}},l=[{value:\"What You&#39;ll Need\",id:\"what-youll-need\",children:[]},{value:\"Download\",id:\"download\",children:[]},{value:\"Setup and Configuration\",id:\"setup-and-configuration\",children:[]},{value:\"Using Espresso\",id:\"using-espresso\",children:[]},{value:\"Using XCUITest\",id:\"using-xcuitest\",children:[{value:\"Building Your iOS App for Use with Sauce Runner\",id:\"building-your-ios-app-for-use-with-sauce-runner\",children:[]}]},{value:\"YAML Configuration Option\",id:\"yaml-configuration-option\",children:[{value:\"General Usage\",id:\"general-usage\",children:[]},{value:\"Config Command\",id:\"config-command\",children:[]},{value:\"Parallel Test Executions\",id:\"parallel-test-executions\",children:[]},{value:\"Sauce Runner Configuration Files\",id:\"sauce-runner-configuration-files\",children:[]}]},{value:\"Uploading Your App and Test Files to TestObject Storage API\",id:\"uploading-your-app-and-test-files-to-testobject-storage-api\",children:[]}],c={rightToc:l};function d(e){var t=e.components,a=Object(i.a)(e,[\"components\"]);return Object(o.mdx)(\"wrapper\",Object(n.default)({},c,a,{components:t,mdxType:\"MDXLayout\"}),Object(o.mdx)(\"div\",{className:\"admonition admonition-warning alert alert--danger\"},Object(o.mdx)(\"div\",Object(n.default)({parentName:\"div\"},{className:\"admonition-heading\"}),Object(o.mdx)(\"h5\",{parentName:\"div\"},Object(o.mdx)(\"span\",Object(n.default)({parentName:\"h5\"},{className:\"admonition-icon\"}),Object(o.mdx)(\"svg\",Object(n.default)({parentName:\"span\"},{xmlns:\"http://www.w3.org/2000/svg\",width:\"12\",height:\"16\",viewBox:\"0 0 12 16\"}),Object(o.mdx)(\"path\",Object(n.default)({parentName:\"svg\"},{fillRule:\"evenodd\",d:\"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z\"})))),\"Only Available in TestObject\")),Object(o.mdx)(\"div\",Object(n.default)({parentName:\"div\"},{className:\"admonition-content\"}),Object(o.mdx)(\"p\",{parentName:\"div\"},\"At the moment, the Sauce Runner is only available for our Legacy Real Device Cloud Platform, therefore all topics in this page do not apply to automated testing with Real Devices in Sauce Labs. Check the \",Object(o.mdx)(\"a\",Object(n.default)({parentName:\"p\"},{href:\"https://sauce-docs.com\"}),\"Real Device Testing in Sauce Labs Feature Preview\"),\" for updates on when the Sauce Runner will be available.\"))),Object(o.mdx)(\"p\",null,\"Sauce Labs offers the ability to run automated user interface tests on our real device cloud using Espresso and XCUITest, the native app testing frameworks for Android and iOS devices, respectively.\"),Object(o.mdx)(\"p\",null,\"To begin, you'll need to download and configure our test runner, Sauce Runner for Real Devices, which is parameterized for use in your CI/CD environments. You can run tests against one or more devices in parallel, with test reporting that includes video, screenshots, and logs of your tests.\"),Object(o.mdx)(\"h2\",{id:\"what-youll-need\"},\"What You'll Need\"),Object(o.mdx)(\"p\",null,\"Prior to downloading Sauce Runner for Real Devices and getting started with your Espresso and XCUITest tests in the Real Device Cloud, you'll need to have:\"),Object(o.mdx)(\"ul\",null,Object(o.mdx)(\"li\",{parentName:\"ul\"},\"The \",Object(o.mdx)(\"inlineCode\",{parentName:\"li\"},\".ipa\"),\" or \",Object(o.mdx)(\"inlineCode\",{parentName:\"li\"},\".apk\"),\" file for both your app and tests\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"Java 8 or later installed on your local machine\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"Set up your mobile app testing project (see \",Object(o.mdx)(\"a\",Object(n.default)({parentName:\"li\"},{href:\"https://wiki.saucelabs.com/pages/viewpage.action?pageId=92677287\"}),\"Application and Project Management for Real Devices\"),\")\")),Object(o.mdx)(\"h2\",{id:\"download\"},\"Download\"),Object(o.mdx)(\"p\",null,\"Download the Sauce Runner for Real Devices (.jar file) (\",Object(o.mdx)(\"a\",Object(n.default)({parentName:\"p\"},{href:\"https://s3.amazonaws.com/saucelabs-runner/v1.9/runner.jar\"}),\"click this link\"),\").\"),Object(o.mdx)(\"h2\",{id:\"setup-and-configuration\"},\"Setup and Configuration\"),Object(o.mdx)(\"p\",null,\"See \",Object(o.mdx)(\"a\",Object(n.default)({parentName:\"p\"},{href:\"https://wiki.saucelabs.com/display/DOCS/Command+Reference+for+Sauce+Runner+for+Real+Devices\"}),\"Command Reference for Sauce Runner for Real Devices\"),\" for a list of options you can use to configure Sauce Runner run tests with both Espresso and XCUITest.\"),Object(o.mdx)(\"p\",null,\"(more TK)\"),Object(o.mdx)(\"h2\",{id:\"using-espresso\"},\"Using Espresso\"),Object(o.mdx)(\"p\",null,\"There are two ways you can run Espresso and UI Automator tests against Sauce Labs real devices:\"),Object(o.mdx)(\"ul\",null,Object(o.mdx)(\"li\",{parentName:\"ul\"},\"By using our test runner, which is parameterized for use in CI/CD environment\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"By using our \",Object(o.mdx)(\"a\",Object(n.default)({parentName:\"li\"},{href:\"https://app.saucelabs.com\"}),\"web interface\"))),Object(o.mdx)(\"h2\",{id:\"using-xcuitest\"},\"Using XCUITest\"),Object(o.mdx)(\"p\",null,\"XCUITest, built on Apple's XCTest framework, is included as part of the iOS Xcode development tools. Tests are written in ObjectiveC/Swift and then built as an \",Object(o.mdx)(\"a\",Object(n.default)({parentName:\"p\"},{href:\"https://wiki.saucelabs.com/display/DOCSDEV/Creating+an+ipa+File\"}),\".ipa file\"),\", which is loaded and executed on the device, along with the application you're testing.\"),Object(o.mdx)(\"blockquote\",null,Object(o.mdx)(\"p\",{parentName:\"blockquote\"},Object(o.mdx)(\"strong\",{parentName:\"p\"},\"One Hour Test Limit\"),\": The execution time for a single XCUITest test is one hour. Our recommended best practice is to keep all tests \",Object(o.mdx)(\"a\",Object(n.default)({parentName:\"p\"},{href:\"https://wiki.saucelabs.com/pages/viewpage.action?pageId=48365933\"}),'\"small, atomic, and autonomous\"'),\" with maximum execution times in minutes or seconds, so you can get the \",Object(o.mdx)(\"a\",Object(n.default)({parentName:\"p\"},{href:\"https://wiki.saucelabs.com/pages/viewpage.action?pageId=72002870\"}),\"most efficiency for your builds\"),\".\")),Object(o.mdx)(\"h3\",{id:\"building-your-ios-app-for-use-with-sauce-runner\"},\"Building Your iOS App for Use with Sauce Runner\"),Object(o.mdx)(\"p\",null,\"When you are ready to build the .ipa file for your app to use with the test runner, you need to make sure that the iOS version you set for the \",Object(o.mdx)(\"strong\",{parentName:\"p\"},\"iOS Deployment Target\"),\" for both the application and your test runner match. If these don\\u2019t match, your tests will run locally, but fail when you run them against the Sauce Labs real devices. You can set this for both Projects and Targets of your application in the Xcode \",Object(o.mdx)(\"strong\",{parentName:\"p\"},\"Build Settings\"),\".  \"),Object(o.mdx)(\"h4\",{id:\"select-your-project\"},Object(o.mdx)(\"strong\",{parentName:\"h4\"},\"Select Your Project\")),Object(o.mdx)(\"p\",null,\"Select the Project you want to build, and under Build Settings, set the iOS Deployment Target to the iOS operating system version you want to use in your test. All target outputs of this project, including the application and your test runner, will be set to the same operating system version.\"),Object(o.mdx)(\"h4\",{id:\"select-your-target\"},Object(o.mdx)(\"strong\",{parentName:\"h4\"},\"Select Your Target\")),Object(o.mdx)(\"p\",null,\"Select the \",Object(o.mdx)(\"strong\",{parentName:\"p\"},\"Target\"),\" for your Project, and under \",Object(o.mdx)(\"strong\",{parentName:\"p\"},\"Build Settings\"),\", set the \",Object(o.mdx)(\"strong\",{parentName:\"p\"},\"iOS Deployment Target\"),\" to the iOS operating system version you want to use in your test. This will also overwrite the Build Settings at the Project level to that operating system version, so if you use this method, be aware that your Targets can become out of synch with each other and the Project settings, and your tests will break. If you change the iOS version for one target output, you may want to build the Project again to make sure all your targets are in sync.\"),Object(o.mdx)(\"h2\",{id:\"yaml-configuration-option\"},\"YAML Configuration Option\"),Object(o.mdx)(\"p\",null,\"As an alternative to using command line arguments to configure your Espresso and XCUITest with Sauce Runner for Real Devices, you can build a YAML configuration file.\"),Object(o.mdx)(\"p\",null,\"In addition to passing configuration options to Sauce Runner for Real Devices through the command line, you can also create a YAML configuration file for your tests. The runner will execute based on the test parameters set in the file.\"),Object(o.mdx)(\"h3\",{id:\"general-usage\"},\"General Usage\"),Object(o.mdx)(\"pre\",null,Object(o.mdx)(\"code\",Object(n.default)({parentName:\"pre\"},{className:\"language-js\"}),\"JAVA_HOME=$(/usr/libexec/java_home --version 8) java -jar runner.jar config --path <path to config.yml> --apikey <apikey>\\n\")),Object(o.mdx)(\"h3\",{id:\"config-command\"},\"Config Command\"),Object(o.mdx)(\"p\",null,\"When you pass the config command to the runner, you can no longer use the other configuration options available on the command line (e.g., \",Object(o.mdx)(\"inlineCode\",{parentName:\"p\"},\"- devices\"),\", \",Object(o.mdx)(\"inlineCode\",{parentName:\"p\"},\"- testname\"),\", etc). The config command only accepts two parameters: \",Object(o.mdx)(\"inlineCode\",{parentName:\"p\"},\"--path <path to config.yml>\"),\" and \",Object(o.mdx)(\"inlineCode\",{parentName:\"p\"},\"--apikey <apikey>\"),\".\"),Object(o.mdx)(\"h3\",{id:\"parallel-test-executions\"},\"Parallel Test Executions\"),Object(o.mdx)(\"p\",null,\"For both examples, the tests can be configured to run in parallel on the Sauce Labs Real Device Cloud.\"),Object(o.mdx)(\"p\",null,\"For each section starting with the - datacenter directive, a new parallel test thread will spin up for the device indicated. If you specify multiple test classes or test methods, each will be executed serially, in the order presented in the section, on the device. The test results for each device are then rolled into a single set of artifacts (e.g., videos, logs) in the UI. These artifacts may be downloaded via the API after the test suite is complete.\"),Object(o.mdx)(\"p\",null,\"If either example were executed, it would result in four separate test executions in parallel on four different devices. The tests within the section will be assigned to that one device and executed in the order specified.\"),Object(o.mdx)(\"h3\",{id:\"sauce-runner-configuration-files\"},\"Sauce Runner Configuration Files\"),Object(o.mdx)(\"h4\",{id:\"xcuitest-example\"},\"XCUITest Example\"),Object(o.mdx)(\"p\",null,\"This snippet includes all the required options for running an XCUITest suite, including the \",Object(o.mdx)(\"inlineCode\",{parentName:\"p\"},\"--devices\"),\" option to select devices based on both static and dynamic allocation, and the \",Object(o.mdx)(\"inlineCode\",{parentName:\"p\"},\"--testsToRun\"),\" option to set a specific set of classes/tests to run on a device. The class(es) specified can be written in Swift or Objective-C.\"),Object(o.mdx)(\"pre\",null,Object(o.mdx)(\"code\",Object(n.default)({parentName:\"pre\"},{className:\"language-sh\"}),\"# Test framework: \\\"xcuitest\\\" in this example\\ntestFramework: xcuitest\\n\\n# Path to the .ipa or .app file (must have the same name as the App created in Sauce Labs)\\napp: ./SampleApp.ipa\\n\\n# Path to the test -Runner app's .ipa or .app file\\ntest: ./SampleAppUITests-Runner.ipa\\n\\n# Path where XML test reports will be saved\\nxmlFolder: ./\\n\\n# A list of devices to be used for this test run\\ndevices:\\n\\n# Device 1 example: this will execute every test in the ipa file on a random iOS device\\n# Only specify a DC (either EU or US)\\n- datacenter: EU\\n\\n# Device 2 example: Static Allocation - this test will only run if the named device is available\\n- datacenter: US\\n  # Specify the specific device name for static allocation\\n  device: iPhone_11_13_5_real_us\\n\\n  # set test name (optional) - this is the name that will appear in the Sauce Labs UI (and API results)\\n  testname: MyTestName2\\n\\n# Device 3 example: Dynamic Allocation\\n- datacenter: US\\n  # Specify a device name or regex for dynamic allocation: 'iPhone X', 'iPad.*', etc.\\n  deviceNameQuery: iPhone 8.*\\n\\n  # Platform Version for a dynamic device query. e.g. '13' for all Devices with major version 13 and\\n  #  arbitrary minor versions or '13.5.1' for a more specific version\\n  platformVersion: 13\\n  testname: MyTestName3\\n\\n  # Optional parameters, set to true to enable\\n  # phoneOnly: false\\n  # tabletOnly: false\\n  # privateDevicesOnly: false            # if 'true', will run only on Private Devices assigned to your account\\n\\n# Device 4 example: Running subset of tests\\n- datacenter: EU\\n  testname: MyTestName4\\n\\n  # Provide a list of test cases or test classes. If you want to run all tests of a class, provide the class name by itself.\\n  #  To run a specific class method, provide both the class and method names.\\n  #  You may specify multiple testClass parameters. As described above, each testClass will execute serially on the device indicated.\\n  #  Each testClass must be preceded by a hyphen (e.g. '- testClass'), whereas testMethod parameters must be at the same indentation\\n  #  level as testClass, without the hyphen\\n  testsToRun:\\n  - testClass: SampleTestCase\\n  - testClass: SampleTestCase2\\n    testMethod: testItWorks\\n\\n\\n  - testClass: SampleTestCase3\\n    testMethod: testThisMethod\\n\\n\")),Object(o.mdx)(\"h4\",{id:\"espresso\"},\"Espresso\"),Object(o.mdx)(\"p\",null,\"This snippet includes all the required options for running an Espresso test suite, including the --devices option to select devices based on both static and dynamic allocation, and the \",Object(o.mdx)(\"inlineCode\",{parentName:\"p\"},\"--envs\"),\" option to set a specific set of classes/tests to run on a device. The class(es) specified can be written in Java or Kotlin.\"),Object(o.mdx)(\"pre\",null,Object(o.mdx)(\"code\",Object(n.default)({parentName:\"pre\"},{className:\"language-sh\"}),\"testFramework: espresso\\n# Path to the app's .apk\\napp: ./SampleApp.apk\\n\\n# Path to the .apk file containing the test bundle\\ntest: ./SampleAppUITests-tests.apk\\n\\n# Path where XML test reports will be saved.\\nxmlFolder: ./\\n\\n# Define a list of devices on which the tests should be executed\\ndevices:\\n\\n# Device 1 example\\n# Only specify a DC (either EU or US). This will execute all test methods on the first random Android\\n#   device which your account is eligible to use\\n- datacenter: EU\\n\\n# Device 2 example: Static Allocation - this test will only run if the named device is available\\n- datacenter: US\\n\\n  # Specify the specific device name for static allocation\\n  device: Samsung_Galaxy_S8_real\\n\\n  # set test name (optional) - this is the name that will appear in the Sauce Labs UI (and API results)\\n  testname: MyTestName3\\n\\n# Device 3 example: Dynamic Allocation\\n- datacenter: US\\n\\n  # Specify a device name or regex for dynamic allocation: 'Samsung Galaxy S7', 'Samsung Galaxy.*', etc.\\n  deviceNameQuery: Samsung Galaxy S7\\n\\n  # Platform Version for a dynamic device query. e.g. '7' for all Devices with major version 7 and\\n  #  arbitrary minor versions or '7.1.2' for a more specific version\\n  platformVersion: 7.1\\n\\n  # Optional parameters, set to true to enable\\n  # phoneOnly: false\\n  # tabletOnly: false\\n  # privateDevicesOnly: false             # if 'true', will run only on Private Devices assigned to your account\\n\\n  testname: MyTestName3\\n\\n# Device 4 example: Running subset of tests.\\n- datacenter: EU\\n  testname: MyTestName4\\n\\n  # Provide a list of test options to espresso\\n  # The key-value pairs supported by espresso are documented here: https://developer.android.com/studio/test/command-line#AMOptionsSyntax\\n  # In the example below the test would execute all test methods defined in the class com.example.android.TestClassA\\n  envs:\\n  - key: class\\n    value: com.example.android.TestClassA\\n\\n\")),Object(o.mdx)(\"h2\",{id:\"uploading-your-app-and-test-files-to-testobject-storage-api\"},\"Uploading Your App and Test Files to TestObject Storage API\"),Object(o.mdx)(\"p\",null,\"As an alternative to using the built-in upload behavior of Sauce Runner for Real Devices, you can separate the upload of your application and test files via TestObject Storage API.\"),Object(o.mdx)(\"p\",null,\"Implementing the separation of upload allows you to take control of when to upload a new version, which in turn helps save time by reducing the total amount of file uploads done.\"),Object(o.mdx)(\"p\",null,\"Below are example \",Object(o.mdx)(\"inlineCode\",{parentName:\"p\"},\"curl\"),\" commands for uploading your app build and test runners to TestObject.\"),Object(o.mdx)(\"p\",null,\"Example: uploading an iOS app\"),Object(o.mdx)(\"pre\",null,Object(o.mdx)(\"code\",Object(n.default)({parentName:\"pre\"},{className:\"language-sh\"}),'curl -u \"username:APP_APIKEY\" -X POST https://app.testobject.com/api/rest -H \"Content-Type: application/octet-stream\" --data-binary @/path/to/iOSApp.ipa\\n')),Object(o.mdx)(\"p\",null,\"Example: uploading an Android app\"),Object(o.mdx)(\"pre\",null,Object(o.mdx)(\"code\",Object(n.default)({parentName:\"pre\"},{className:\"language-sh\"}),'curl -u \"username:APP_APIKEY\" -X POST https://app.testobject.com/api/rest -H \"Content-Type: application/octet-stream\" --data-binary @/path/to/androidApp.apk\\n')),Object(o.mdx)(\"p\",null,\"Example: uploading an iOS test runner\"),Object(o.mdx)(\"pre\",null,Object(o.mdx)(\"code\",Object(n.default)({parentName:\"pre\"},{className:\"language-sh\"}),'curl -u \"username:APP_APIKEY\" -X POST https://app.testobject.com/api/rest -H \"Content-Type: application/octet-stream\" -H \"App-Type: XCUITEST\" --data-binary @/path/to/XCUITests-Runner.ipa\\n')),Object(o.mdx)(\"p\",null,\"Example: uploading an Android test runner\"),Object(o.mdx)(\"pre\",null,Object(o.mdx)(\"code\",Object(n.default)({parentName:\"pre\"},{className:\"language-sh\"}),'curl -u \"username:APP_APIKEY\" -X POST https://app.testobject.com/api/rest -H \"Content-Type: application/octet-stream\" -H \"App-Type: ANDROID_INSTRUMENTATION_TEST\" --data-binary @/path/to/androidTest.apk\\n``\\n\\n')))}d.isMDXComponent=!0}}]);","name":"8fd5d51e.318146ea.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[57],{\n\n/***/ 203:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MDXContext\", function() { return MDXContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MDXProvider\", function() { return MDXProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mdx\", function() { return createElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useMDXComponents\", function() { return useMDXComponents; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"withMDXComponents\", function() { return withMDXComponents; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === 'function';\n};\n\nvar MDXContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = react__WEBPACK_IMPORTED_MODULE_0___default.a.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = 'mdxType';\nvar DEFAULTS = {\n  inlineCode: 'code',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, [\"components\", \"mdxType\", \"originalType\", \"parentName\"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components[\"\".concat(parentName, \".\").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = 'MDXCreateElement';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === 'string' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === 'string' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement.apply(null, createElementArgArray);\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement.apply(null, args);\n}\n\n\n\n\n/***/ }),\n\n/***/ 90:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frontMatter\", function() { return frontMatter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"metadata\", function() { return metadata; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rightToc\", function() { return rightToc; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MDXContent; });\n/* harmony import */ var _Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(203);\nvar frontMatter={id:'real-device-testing',title:'Real Device Testing with Espresso and XCUITest',sidebar_label:'Real Device Testing'};var metadata={\"unversionedId\":\"mobile-apps/automated-testing/espresso-xcuitest/real-device-testing\",\"id\":\"mobile-apps/automated-testing/espresso-xcuitest/real-device-testing\",\"isDocsHomePage\":false,\"title\":\"Real Device Testing with Espresso and XCUITest\",\"description\":\"At the moment, the Sauce Runner is only available for our Legacy Real Device Cloud Platform, therefore all topics in this page do not apply to automated testing with Real Devices in Sauce Labs. Check the Real Device Testing in Sauce Labs Feature Preview for updates on when the Sauce Runner will be available.\",\"source\":\"@site/docs/mobile-apps/automated-testing/espresso-xcuitest/real-device-testing.md\",\"slug\":\"/mobile-apps/automated-testing/espresso-xcuitest/real-device-testing\",\"permalink\":\"/mobile-apps/automated-testing/espresso-xcuitest/real-device-testing\",\"editUrl\":\"https://github.com/saucelabs/sauce-docs/edit/master/docs/mobile-apps/automated-testing/espresso-xcuitest/real-device-testing.md\",\"version\":\"current\",\"lastUpdatedBy\":\"kimsaucelabs\",\"lastUpdatedAt\":1607037055,\"sidebar_label\":\"Real Device Testing\",\"sidebar\":\"someSidebar\",\"previous\":{\"title\":\"Automated Testing with WebdriverIO\",\"permalink\":\"/mobile-apps/automated-testing/wdio\"},\"next\":{\"title\":\"Virtual Device Testing with Espresso\",\"permalink\":\"/mobile-apps/automated-testing/espresso-xcuitest/virtual-device-testing\"}};/* @jsxRuntime classic */ /* @jsx mdx */var rightToc=[{value:'What You&#39;ll Need',id:'what-youll-need',children:[]},{value:'Download',id:'download',children:[]},{value:'Setup and Configuration',id:'setup-and-configuration',children:[]},{value:'Using Espresso',id:'using-espresso',children:[]},{value:'Using XCUITest',id:'using-xcuitest',children:[{value:'Building Your iOS App for Use with Sauce Runner',id:'building-your-ios-app-for-use-with-sauce-runner',children:[]}]},{value:'YAML Configuration Option',id:'yaml-configuration-option',children:[{value:'General Usage',id:'general-usage',children:[]},{value:'Config Command',id:'config-command',children:[]},{value:'Parallel Test Executions',id:'parallel-test-executions',children:[]},{value:'Sauce Runner Configuration Files',id:'sauce-runner-configuration-files',children:[]}]},{value:'Uploading Your App and Test Files to TestObject Storage API',id:'uploading-your-app-and-test-files-to-testobject-storage-api',children:[]}];var layoutProps={rightToc:rightToc};var MDXLayout=\"wrapper\";function MDXContent(_ref){var components=_ref.components,props=Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(_ref,[\"components\"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(MDXLayout,Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({},layoutProps,props,{components:components,mdxType:\"MDXLayout\"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"div\",{\"className\":\"admonition admonition-warning alert alert--danger\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"div\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"div\"},{\"className\":\"admonition-heading\"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h5\",{parentName:\"div\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"span\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"h5\"},{\"className\":\"admonition-icon\"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"svg\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"span\"},{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"12\",\"height\":\"16\",\"viewBox\":\"0 0 12 16\"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"path\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"svg\"},{\"fillRule\":\"evenodd\",\"d\":\"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z\"})))),\"Only Available in TestObject\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"div\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"div\"},{\"className\":\"admonition-content\"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",{parentName:\"div\"},\"At the moment, the Sauce Runner is only available for our Legacy Real Device Cloud Platform, therefore all topics in this page do not apply to automated testing with Real Devices in Sauce Labs. Check the \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"p\"},{\"href\":\"https://sauce-docs.com\"}),\"Real Device Testing in Sauce Labs Feature Preview\"),\" for updates on when the Sauce Runner will be available.\"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Sauce Labs offers the ability to run automated user interface tests on our real device cloud using Espresso and XCUITest, the native app testing frameworks for Android and iOS devices, respectively.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"To begin, you'll need to download and configure our test runner, Sauce Runner for Real Devices, which is parameterized for use in your CI/CD environments. You can run tests against one or more devices in parallel, with test reporting that includes video, screenshots, and logs of your tests.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h2\",{\"id\":\"what-youll-need\"},\"What You'll Need\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Prior to downloading Sauce Runner for Real Devices and getting started with your Espresso and XCUITest tests in the Real Device Cloud, you'll need to have:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"The \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"inlineCode\",{parentName:\"li\"},\".ipa\"),\" or \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"inlineCode\",{parentName:\"li\"},\".apk\"),\" file for both your app and tests\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"Java 8 or later installed on your local machine\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"Set up your mobile app testing project (see \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"li\"},{\"href\":\"https://wiki.saucelabs.com/pages/viewpage.action?pageId=92677287\"}),\"Application and Project Management for Real Devices\"),\")\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h2\",{\"id\":\"download\"},\"Download\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Download the Sauce Runner for Real Devices (.jar file) (\",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"p\"},{\"href\":\"https://s3.amazonaws.com/saucelabs-runner/v1.9/runner.jar\"}),\"click this link\"),\").\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h2\",{\"id\":\"setup-and-configuration\"},\"Setup and Configuration\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"See \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"p\"},{\"href\":\"https://wiki.saucelabs.com/display/DOCS/Command+Reference+for+Sauce+Runner+for+Real+Devices\"}),\"Command Reference for Sauce Runner for Real Devices\"),\" for a list of options you can use to configure Sauce Runner run tests with both Espresso and XCUITest.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"(more TK)\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h2\",{\"id\":\"using-espresso\"},\"Using Espresso\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"There are two ways you can run Espresso and UI Automator tests against Sauce Labs real devices:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"By using our test runner, which is parameterized for use in CI/CD environment\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"By using our \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"li\"},{\"href\":\"https://app.saucelabs.com\"}),\"web interface\"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h2\",{\"id\":\"using-xcuitest\"},\"Using XCUITest\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"XCUITest, built on Apple's XCTest framework, is included as part of the iOS Xcode development tools. Tests are written in ObjectiveC/Swift and then built as an \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"p\"},{\"href\":\"https://wiki.saucelabs.com/display/DOCSDEV/Creating+an+ipa+File\"}),\".ipa file\"),\", which is loaded and executed on the device, along with the application you're testing.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"blockquote\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",{parentName:\"blockquote\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"p\"},\"One Hour Test Limit\"),\": The execution time for a single XCUITest test is one hour. Our recommended best practice is to keep all tests \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"p\"},{\"href\":\"https://wiki.saucelabs.com/pages/viewpage.action?pageId=48365933\"}),\"\\\"small, atomic, and autonomous\\\"\"),\" with maximum execution times in minutes or seconds, so you can get the \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"p\"},{\"href\":\"https://wiki.saucelabs.com/pages/viewpage.action?pageId=72002870\"}),\"most efficiency for your builds\"),\".\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h3\",{\"id\":\"building-your-ios-app-for-use-with-sauce-runner\"},\"Building Your iOS App for Use with Sauce Runner\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"When you are ready to build the .ipa file for your app to use with the test runner, you need to make sure that the iOS version you set for the \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"p\"},\"iOS Deployment Target\"),\" for both the application and your test runner match. If these don\\u2019t match, your tests will run locally, but fail when you run them against the Sauce Labs real devices. You can set this for both Projects and Targets of your application in the Xcode \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"p\"},\"Build Settings\"),\".  \"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h4\",{\"id\":\"select-your-project\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"h4\"},\"Select Your Project\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Select the Project you want to build, and under Build Settings, set the iOS Deployment Target to the iOS operating system version you want to use in your test. All target outputs of this project, including the application and your test runner, will be set to the same operating system version.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h4\",{\"id\":\"select-your-target\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"h4\"},\"Select Your Target\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Select the \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"p\"},\"Target\"),\" for your Project, and under \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"p\"},\"Build Settings\"),\", set the \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"p\"},\"iOS Deployment Target\"),\" to the iOS operating system version you want to use in your test. This will also overwrite the Build Settings at the Project level to that operating system version, so if you use this method, be aware that your Targets can become out of synch with each other and the Project settings, and your tests will break. If you change the iOS version for one target output, you may want to build the Project again to make sure all your targets are in sync.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h2\",{\"id\":\"yaml-configuration-option\"},\"YAML Configuration Option\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"As an alternative to using command line arguments to configure your Espresso and XCUITest with Sauce Runner for Real Devices, you can build a YAML configuration file.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"In addition to passing configuration options to Sauce Runner for Real Devices through the command line, you can also create a YAML configuration file for your tests. The runner will execute based on the test parameters set in the file.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h3\",{\"id\":\"general-usage\"},\"General Usage\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"code\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"pre\"},{\"className\":\"language-js\"}),\"JAVA_HOME=$(/usr/libexec/java_home --version 8) java -jar runner.jar config --path <path to config.yml> --apikey <apikey>\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h3\",{\"id\":\"config-command\"},\"Config Command\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"When you pass the config command to the runner, you can no longer use the other configuration options available on the command line (e.g., \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"inlineCode\",{parentName:\"p\"},\"- devices\"),\", \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"inlineCode\",{parentName:\"p\"},\"- testname\"),\", etc). The config command only accepts two parameters: \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"inlineCode\",{parentName:\"p\"},\"--path <path to config.yml>\"),\" and \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"inlineCode\",{parentName:\"p\"},\"--apikey <apikey>\"),\".\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h3\",{\"id\":\"parallel-test-executions\"},\"Parallel Test Executions\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"For both examples, the tests can be configured to run in parallel on the Sauce Labs Real Device Cloud.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"For each section starting with the - datacenter directive, a new parallel test thread will spin up for the device indicated. If you specify multiple test classes or test methods, each will be executed serially, in the order presented in the section, on the device. The test results for each device are then rolled into a single set of artifacts (e.g., videos, logs) in the UI. These artifacts may be downloaded via the API after the test suite is complete.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"If either example were executed, it would result in four separate test executions in parallel on four different devices. The tests within the section will be assigned to that one device and executed in the order specified.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h3\",{\"id\":\"sauce-runner-configuration-files\"},\"Sauce Runner Configuration Files\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h4\",{\"id\":\"xcuitest-example\"},\"XCUITest Example\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"This snippet includes all the required options for running an XCUITest suite, including the \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"inlineCode\",{parentName:\"p\"},\"--devices\"),\" option to select devices based on both static and dynamic allocation, and the \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"inlineCode\",{parentName:\"p\"},\"--testsToRun\"),\" option to set a specific set of classes/tests to run on a device. The class(es) specified can be written in Swift or Objective-C.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"code\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"pre\"},{\"className\":\"language-sh\"}),\"# Test framework: \\\"xcuitest\\\" in this example\\ntestFramework: xcuitest\\n\\n# Path to the .ipa or .app file (must have the same name as the App created in Sauce Labs)\\napp: ./SampleApp.ipa\\n\\n# Path to the test -Runner app's .ipa or .app file\\ntest: ./SampleAppUITests-Runner.ipa\\n\\n# Path where XML test reports will be saved\\nxmlFolder: ./\\n\\n# A list of devices to be used for this test run\\ndevices:\\n\\n# Device 1 example: this will execute every test in the ipa file on a random iOS device\\n# Only specify a DC (either EU or US)\\n- datacenter: EU\\n\\n# Device 2 example: Static Allocation - this test will only run if the named device is available\\n- datacenter: US\\n  # Specify the specific device name for static allocation\\n  device: iPhone_11_13_5_real_us\\n\\n  # set test name (optional) - this is the name that will appear in the Sauce Labs UI (and API results)\\n  testname: MyTestName2\\n\\n# Device 3 example: Dynamic Allocation\\n- datacenter: US\\n  # Specify a device name or regex for dynamic allocation: 'iPhone X', 'iPad.*', etc.\\n  deviceNameQuery: iPhone 8.*\\n\\n  # Platform Version for a dynamic device query. e.g. '13' for all Devices with major version 13 and\\n  #  arbitrary minor versions or '13.5.1' for a more specific version\\n  platformVersion: 13\\n  testname: MyTestName3\\n\\n  # Optional parameters, set to true to enable\\n  # phoneOnly: false\\n  # tabletOnly: false\\n  # privateDevicesOnly: false            # if 'true', will run only on Private Devices assigned to your account\\n\\n# Device 4 example: Running subset of tests\\n- datacenter: EU\\n  testname: MyTestName4\\n\\n  # Provide a list of test cases or test classes. If you want to run all tests of a class, provide the class name by itself.\\n  #  To run a specific class method, provide both the class and method names.\\n  #  You may specify multiple testClass parameters. As described above, each testClass will execute serially on the device indicated.\\n  #  Each testClass must be preceded by a hyphen (e.g. '- testClass'), whereas testMethod parameters must be at the same indentation\\n  #  level as testClass, without the hyphen\\n  testsToRun:\\n  - testClass: SampleTestCase\\n  - testClass: SampleTestCase2\\n    testMethod: testItWorks\\n\\n\\n  - testClass: SampleTestCase3\\n    testMethod: testThisMethod\\n\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h4\",{\"id\":\"espresso\"},\"Espresso\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"This snippet includes all the required options for running an Espresso test suite, including the --devices option to select devices based on both static and dynamic allocation, and the \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"inlineCode\",{parentName:\"p\"},\"--envs\"),\" option to set a specific set of classes/tests to run on a device. The class(es) specified can be written in Java or Kotlin.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"code\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"pre\"},{\"className\":\"language-sh\"}),\"testFramework: espresso\\n# Path to the app's .apk\\napp: ./SampleApp.apk\\n\\n# Path to the .apk file containing the test bundle\\ntest: ./SampleAppUITests-tests.apk\\n\\n# Path where XML test reports will be saved.\\nxmlFolder: ./\\n\\n# Define a list of devices on which the tests should be executed\\ndevices:\\n\\n# Device 1 example\\n# Only specify a DC (either EU or US). This will execute all test methods on the first random Android\\n#   device which your account is eligible to use\\n- datacenter: EU\\n\\n# Device 2 example: Static Allocation - this test will only run if the named device is available\\n- datacenter: US\\n\\n  # Specify the specific device name for static allocation\\n  device: Samsung_Galaxy_S8_real\\n\\n  # set test name (optional) - this is the name that will appear in the Sauce Labs UI (and API results)\\n  testname: MyTestName3\\n\\n# Device 3 example: Dynamic Allocation\\n- datacenter: US\\n\\n  # Specify a device name or regex for dynamic allocation: 'Samsung Galaxy S7', 'Samsung Galaxy.*', etc.\\n  deviceNameQuery: Samsung Galaxy S7\\n\\n  # Platform Version for a dynamic device query. e.g. '7' for all Devices with major version 7 and\\n  #  arbitrary minor versions or '7.1.2' for a more specific version\\n  platformVersion: 7.1\\n\\n  # Optional parameters, set to true to enable\\n  # phoneOnly: false\\n  # tabletOnly: false\\n  # privateDevicesOnly: false             # if 'true', will run only on Private Devices assigned to your account\\n\\n  testname: MyTestName3\\n\\n# Device 4 example: Running subset of tests.\\n- datacenter: EU\\n  testname: MyTestName4\\n\\n  # Provide a list of test options to espresso\\n  # The key-value pairs supported by espresso are documented here: https://developer.android.com/studio/test/command-line#AMOptionsSyntax\\n  # In the example below the test would execute all test methods defined in the class com.example.android.TestClassA\\n  envs:\\n  - key: class\\n    value: com.example.android.TestClassA\\n\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h2\",{\"id\":\"uploading-your-app-and-test-files-to-testobject-storage-api\"},\"Uploading Your App and Test Files to TestObject Storage API\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"As an alternative to using the built-in upload behavior of Sauce Runner for Real Devices, you can separate the upload of your application and test files via TestObject Storage API.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Implementing the separation of upload allows you to take control of when to upload a new version, which in turn helps save time by reducing the total amount of file uploads done.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Below are example \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"inlineCode\",{parentName:\"p\"},\"curl\"),\" commands for uploading your app build and test runners to TestObject.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Example: uploading an iOS app\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"code\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"pre\"},{\"className\":\"language-sh\"}),\"curl -u \\\"username:APP_APIKEY\\\" -X POST https://app.testobject.com/api/rest -H \\\"Content-Type: application/octet-stream\\\" --data-binary @/path/to/iOSApp.ipa\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Example: uploading an Android app\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"code\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"pre\"},{\"className\":\"language-sh\"}),\"curl -u \\\"username:APP_APIKEY\\\" -X POST https://app.testobject.com/api/rest -H \\\"Content-Type: application/octet-stream\\\" --data-binary @/path/to/androidApp.apk\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Example: uploading an iOS test runner\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"code\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"pre\"},{\"className\":\"language-sh\"}),\"curl -u \\\"username:APP_APIKEY\\\" -X POST https://app.testobject.com/api/rest -H \\\"Content-Type: application/octet-stream\\\" -H \\\"App-Type: XCUITEST\\\" --data-binary @/path/to/XCUITests-Runner.ipa\\n\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Example: uploading an Android test runner\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"pre\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"code\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"pre\"},{\"className\":\"language-sh\"}),\"curl -u \\\"username:APP_APIKEY\\\" -X POST https://app.testobject.com/api/rest -H \\\"Content-Type: application/octet-stream\\\" -H \\\"App-Type: ANDROID_INSTRUMENTATION_TEST\\\" --data-binary @/path/to/androidTest.apk\\n``\\n\\n\")));};MDXContent.isMDXComponent=true;\n\n/***/ })\n\n}]);","inputSourceMap":null}