{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{160:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"MDXContext\",(function(){return u})),n.d(t,\"MDXProvider\",(function(){return m})),n.d(t,\"mdx\",(function(){return f})),n.d(t,\"useMDXComponents\",(function(){return p})),n.d(t,\"withMDXComponents\",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=r.a.createContext({}),d=function(e){return function(t){var n=p(t.components);return r.a.createElement(e,o({},t,{components:n}))}},p=function(e){var t=r.a.useContext(u),n=t;return e&&(n=\"function\"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=p(e.components);return r.a.createElement(u.Provider,{value:t},e.children)},b={inlineCode:\"code\",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},g=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,[\"components\",\"mdxType\",\"originalType\",\"parentName\"]),u=p(n),d=a,m=u[\"\".concat(o,\".\").concat(d)]||u[d]||b[d]||i;return n?r.a.createElement(m,c(c({ref:t},s),{},{components:n})):r.a.createElement(m,c({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if(\"string\"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType=\"string\"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}g.displayName=\"MDXCreateElement\"},69:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"frontMatter\",(function(){return o})),n.d(t,\"metadata\",(function(){return s})),n.d(t,\"rightToc\",(function(){return c})),n.d(t,\"default\",(function(){return u}));var a=n(3),r=n(8),i=(n(0),n(160)),o={id:\"real-device-testing\",title:\"Real Device Testing with Espresso and XCUITest\",sidebar_label:\"Real Device Testing\"},s={unversionedId:\"mobile-apps/automated-testing/espresso-xcuitest/real-device-testing\",id:\"mobile-apps/automated-testing/espresso-xcuitest/real-device-testing\",isDocsHomePage:!1,title:\"Real Device Testing with Espresso and XCUITest\",description:\"Espresso and XCUITest real device testing is supported on TestObject, our Legacy Real Device Cloud Platform, which you can access via Sauce Apps > Legacy RDC.\",source:\"@site/docs/mobile-apps/automated-testing/espresso-xcuitest/real-device-testing.md\",slug:\"/mobile-apps/automated-testing/espresso-xcuitest/real-device-testing\",permalink:\"/mobile-apps/automated-testing/espresso-xcuitest/real-device-testing\",editUrl:\"https://github.com/saucelabs/sauce-docs/edit/master/docs/mobile-apps/automated-testing/espresso-xcuitest/real-device-testing.md\",version:\"current\",lastUpdatedBy:\"kimsaucelabs\",lastUpdatedAt:1607751038,sidebar_label:\"Real Device Testing\",sidebar:\"someSidebar\",previous:{title:\"Automated Testing with Espresso and XCUITest\",permalink:\"/mobile-apps/automated-testing/espresso-xcuitest\"},next:{title:\"Virtual Device Testing with Espresso\",permalink:\"/mobile-apps/automated-testing/espresso-xcuitest/virtual-device-testing\"}},c=[{value:\"What You&#39;ll Need\",id:\"what-youll-need\",children:[]},{value:\"System Requirements\",id:\"system-requirements\",children:[]},{value:\"Download\",id:\"download\",children:[]},{value:\"Configuration\",id:\"configuration\",children:[]},{value:\"Using Espresso\",id:\"using-espresso\",children:[]},{value:\"Using XCUITest\",id:\"using-xcuitest\",children:[{value:\"Executing Your Test\",id:\"executing-your-test\",children:[]}]}],l={rightToc:c};function u(e){var t=e.components,n=Object(r.a)(e,[\"components\"]);return Object(i.mdx)(\"wrapper\",Object(a.default)({},l,n,{components:t,mdxType:\"MDXLayout\"}),Object(i.mdx)(\"div\",{className:\"admonition admonition-warning alert alert--danger\"},Object(i.mdx)(\"div\",Object(a.default)({parentName:\"div\"},{className:\"admonition-heading\"}),Object(i.mdx)(\"h5\",{parentName:\"div\"},Object(i.mdx)(\"span\",Object(a.default)({parentName:\"h5\"},{className:\"admonition-icon\"}),Object(i.mdx)(\"svg\",Object(a.default)({parentName:\"span\"},{xmlns:\"http://www.w3.org/2000/svg\",width:\"12\",height:\"16\",viewBox:\"0 0 12 16\"}),Object(i.mdx)(\"path\",Object(a.default)({parentName:\"svg\"},{fillRule:\"evenodd\",d:\"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z\"})))),\"Only Available in TestObject\")),Object(i.mdx)(\"div\",Object(a.default)({parentName:\"div\"},{className:\"admonition-content\"}),Object(i.mdx)(\"p\",{parentName:\"div\"},\"Espresso and XCUITest real device testing is supported on TestObject, our \",Object(i.mdx)(\"a\",Object(a.default)({parentName:\"p\"},{href:\"https://wiki.saucelabs.com/pages/viewpage.action?pageId=102721177\"}),\"Legacy Real Device Cloud Platform\"),\", which you can access via \",Object(i.mdx)(\"strong\",{parentName:\"p\"},\"Sauce Apps\"),\" > \",Object(i.mdx)(\"strong\",{parentName:\"p\"},\"Legacy RDC\"),\".\"),Object(i.mdx)(\"p\",{parentName:\"div\"},\"In early 2021, support will be moving from TestObject to Sauce Labs. See \",Object(i.mdx)(\"a\",Object(a.default)({parentName:\"p\"},{href:\"https://wiki.saucelabs.com/display/DOCS/Real+Device+Testing+in+Sauce+Labs+Feature+Preview\"}),\"Real Device Testing in Sauce Labs Feature Preview\"),\" for more information.\"))),Object(i.mdx)(\"p\",null,\"Automated testing is included in the two most common integrated development environments (IDEs) used for making mobile apps:\"),Object(i.mdx)(\"ul\",null,Object(i.mdx)(\"li\",{parentName:\"ul\"},\"Android Studio, published by Google, provides automated testing capability by way of Espresso\"),Object(i.mdx)(\"li\",{parentName:\"ul\"},\"XCode, the standard development environment for creating Apple iOS apps, uses XCUITest\")),Object(i.mdx)(\"p\",null,\"Our Sauce Runner for Real Devices test runner enables you to integrate Espresso and XCUITest with Sauce Labs real device testing. Leverage the power of our 2,000+ Android and iOS devices to run mobile app user interface (UI) tests, accelerate test execution with parallel testing, and gain immediate insight with test reporting comprised of video, screenshots, and logs.\"),Object(i.mdx)(\"h2\",{id:\"what-youll-need\"},\"What You'll Need\"),Object(i.mdx)(\"p\",null,\"To get started, you'll need to download and configure Sauce Runner for Real Devices, which is parameterized for use in your CI/CD environments. When you launch a test, the runner authenticates access to Espresso and XCUITest testing using the API key inside runner file. Finally, it validates your mobile app and test files before uploading to our real device cloud.\"),Object(i.mdx)(\"ul\",null,Object(i.mdx)(\"li\",{parentName:\"ul\"},\"The mobile app file (.ipa for iOS; .apk for Android) for both your app and tests\"),Object(i.mdx)(\"li\",{parentName:\"ul\"},\"Set up your mobile app testing project (see \",Object(i.mdx)(\"a\",Object(a.default)({parentName:\"li\"},{href:\"https://wiki.saucelabs.com/pages/viewpage.action?pageId=92677287\"}),\"Application and Project Management for Real Devices\"),\")\")),Object(i.mdx)(\"h2\",{id:\"system-requirements\"},\"System Requirements\"),Object(i.mdx)(\"p\",null,\"Minimum requirements for installing Sauce Runner for Real Devices:\"),Object(i.mdx)(\"ul\",null,Object(i.mdx)(\"li\",{parentName:\"ul\"},\"Java 8 or later installed on your local machine\")),Object(i.mdx)(\"h2\",{id:\"download\"},\"Download\"),Object(i.mdx)(\"p\",null,Object(i.mdx)(\"a\",Object(a.default)({parentName:\"p\"},{href:\"https://s3.amazonaws.com/saucelabs-runner/v1.9/runner.jar\"}),\"Click here\"),\" to download the Sauce Runner for Real Devices .jar file.\"),Object(i.mdx)(\"h2\",{id:\"configuration\"},\"Configuration\"),Object(i.mdx)(\"p\",null,\"Here's how to configure Sauce Runner for Real Devices with Espresso and XCUITest.\"),Object(i.mdx)(\"ol\",null,Object(i.mdx)(\"li\",{parentName:\"ol\"},\"Choose one of the following commands to add to your code:\")),Object(i.mdx)(\"ul\",null,Object(i.mdx)(\"li\",{parentName:\"ul\"},Object(i.mdx)(\"p\",{parentName:\"li\"},Object(i.mdx)(\"inlineCode\",{parentName:\"p\"},\"xcuitest\"),\" Defines XCUITest as the test framework to use for your native iOS app tests\")),Object(i.mdx)(\"li\",{parentName:\"ul\"},Object(i.mdx)(\"p\",{parentName:\"li\"},Object(i.mdx)(\"inlineCode\",{parentName:\"p\"},\"espresso\"),\" Defines Espresso as the test framework to use for your native Android app tests\"))),Object(i.mdx)(\"ol\",{start:2},Object(i.mdx)(\"li\",{parentName:\"ol\"},\"Choose one of the following ways to set your test parameters:\")),Object(i.mdx)(\"ul\",null,Object(i.mdx)(\"li\",{parentName:\"ul\"},Object(i.mdx)(\"strong\",{parentName:\"li\"},\"Add command line options\"),\": see \",Object(i.mdx)(\"a\",Object(a.default)({parentName:\"li\"},{href:\"/dev/cli/espresso-xcuitest\"}),\"Sauce Runner for Real Devices command line options\")),Object(i.mdx)(\"li\",{parentName:\"ul\"},Object(i.mdx)(\"strong\",{parentName:\"li\"},\"Create a YAML configuration file\"),\": see \",Object(i.mdx)(\"a\",Object(a.default)({parentName:\"li\"},{href:\"/mobile-apps/automated-testing/espresso-xcuitest/example-configurations\"}),\"Example Configurations\"))),Object(i.mdx)(\"h2\",{id:\"using-espresso\"},\"Using Espresso\"),Object(i.mdx)(\"p\",null,\"There are two ways you can run Espresso and UI Automator tests against Sauce Labs real devices:\"),Object(i.mdx)(\"ul\",null,Object(i.mdx)(\"li\",{parentName:\"ul\"},\"By using our test runner, which is parameterized for use in CI/CD environment\"),Object(i.mdx)(\"li\",{parentName:\"ul\"},\"By using our \",Object(i.mdx)(\"a\",Object(a.default)({parentName:\"li\"},{href:\"https://app.saucelabs.com\"}),\"web interface\"))),Object(i.mdx)(\"h2\",{id:\"using-xcuitest\"},\"Using XCUITest\"),Object(i.mdx)(\"p\",null,\"Once you've written your iOS app test in ObjectiveC/Swift, you'll need to build it as an .ipa file for use with Sauce Runner for Real Devices. For instructions, see \",Object(i.mdx)(\"a\",Object(a.default)({parentName:\"p\"},{href:\"https://wiki.saucelabs.com/pages/viewpage.action?pageId=67767691\"}),\"Creating an .ipa File\"),\".\"),Object(i.mdx)(\"p\",null,\"Under \",Object(i.mdx)(\"strong\",{parentName:\"p\"},\"iOS Deployment Target\"),\", ensure that you set the same iOS version for both the app and your test runner. If these don't match, your tests will run locally, but fail when you run them against Sauce Labs real devices. From your Xcode \",Object(i.mdx)(\"strong\",{parentName:\"p\"},\"Build Settings\"),\":\"),Object(i.mdx)(\"ol\",null,Object(i.mdx)(\"li\",{parentName:\"ol\"},Object(i.mdx)(\"p\",{parentName:\"li\"},Object(i.mdx)(\"strong\",{parentName:\"p\"},\"Select Your App Project\"),\": Select the Project you want to build, and under Build Settings, set the iOS Deployment Target to the iOS operating system version you want to use in your test. All target outputs of this project, including the application and your test runner, will be set to the same operating system version.\")),Object(i.mdx)(\"li\",{parentName:\"ol\"},Object(i.mdx)(\"p\",{parentName:\"li\"},Object(i.mdx)(\"strong\",{parentName:\"p\"},\"Select Your App Target\"),\": Select the \",Object(i.mdx)(\"strong\",{parentName:\"p\"},\"Target\"),\" for your Project, and under \",Object(i.mdx)(\"strong\",{parentName:\"p\"},\"Build Settings\"),\", set the \",Object(i.mdx)(\"strong\",{parentName:\"p\"},\"iOS Deployment Target\"),\" to the iOS operating system version you want to use in your test. This will also overwrite the Build Settings at the Project level to that operating system version, so if you use this method, be aware that your Targets can become out of sync with each other and the Project settings, and your tests will break. If you change the iOS version for one target output, you may want to build the Project again to make sure all your targets are in sync.\"))),Object(i.mdx)(\"h3\",{id:\"executing-your-test\"},\"Executing Your Test\"),Object(i.mdx)(\"p\",null,\"Load and execute your .ipa file on the real mobile device, along with the app you're testing.\"),Object(i.mdx)(\"p\",null,Object(i.mdx)(\"strong\",{parentName:\"p\"},\"NOTE\"),\": The maximum execution time for a single XCUITest test is one hour. As a best practice, we recommend designing your tests as \",Object(i.mdx)(\"a\",Object(a.default)({parentName:\"p\"},{href:\"https://wiki.saucelabs.com/pages/viewpage.action?pageId=48365933\"}),\"small, atomic, autonomous\"),\", and setting maximum execution times in minutes or seconds, so you can get the most efficiency for your builds.\"))}u.isMDXComponent=!0}}]);","name":"8fd5d51e.f7cda8f1.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[36],{\n\n/***/ 160:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MDXContext\", function() { return MDXContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MDXProvider\", function() { return MDXProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mdx\", function() { return createElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useMDXComponents\", function() { return useMDXComponents; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"withMDXComponents\", function() { return withMDXComponents; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === 'function';\n};\n\nvar MDXContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = react__WEBPACK_IMPORTED_MODULE_0___default.a.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = 'mdxType';\nvar DEFAULTS = {\n  inlineCode: 'code',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, [\"components\", \"mdxType\", \"originalType\", \"parentName\"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components[\"\".concat(parentName, \".\").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = 'MDXCreateElement';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === 'string' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === 'string' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement.apply(null, createElementArgArray);\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement.apply(null, args);\n}\n\n\n\n\n/***/ }),\n\n/***/ 69:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frontMatter\", function() { return frontMatter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"metadata\", function() { return metadata; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rightToc\", function() { return rightToc; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MDXContent; });\n/* harmony import */ var _Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(160);\nvar frontMatter={id:'real-device-testing',title:'Real Device Testing with Espresso and XCUITest',sidebar_label:'Real Device Testing'};var metadata={\"unversionedId\":\"mobile-apps/automated-testing/espresso-xcuitest/real-device-testing\",\"id\":\"mobile-apps/automated-testing/espresso-xcuitest/real-device-testing\",\"isDocsHomePage\":false,\"title\":\"Real Device Testing with Espresso and XCUITest\",\"description\":\"Espresso and XCUITest real device testing is supported on TestObject, our Legacy Real Device Cloud Platform, which you can access via Sauce Apps > Legacy RDC.\",\"source\":\"@site/docs/mobile-apps/automated-testing/espresso-xcuitest/real-device-testing.md\",\"slug\":\"/mobile-apps/automated-testing/espresso-xcuitest/real-device-testing\",\"permalink\":\"/mobile-apps/automated-testing/espresso-xcuitest/real-device-testing\",\"editUrl\":\"https://github.com/saucelabs/sauce-docs/edit/master/docs/mobile-apps/automated-testing/espresso-xcuitest/real-device-testing.md\",\"version\":\"current\",\"lastUpdatedBy\":\"kimsaucelabs\",\"lastUpdatedAt\":1607751038,\"sidebar_label\":\"Real Device Testing\",\"sidebar\":\"someSidebar\",\"previous\":{\"title\":\"Automated Testing with Espresso and XCUITest\",\"permalink\":\"/mobile-apps/automated-testing/espresso-xcuitest\"},\"next\":{\"title\":\"Virtual Device Testing with Espresso\",\"permalink\":\"/mobile-apps/automated-testing/espresso-xcuitest/virtual-device-testing\"}};/* @jsxRuntime classic */ /* @jsx mdx */var rightToc=[{value:'What You&#39;ll Need',id:'what-youll-need',children:[]},{value:'System Requirements',id:'system-requirements',children:[]},{value:'Download',id:'download',children:[]},{value:'Configuration',id:'configuration',children:[]},{value:'Using Espresso',id:'using-espresso',children:[]},{value:'Using XCUITest',id:'using-xcuitest',children:[{value:'Executing Your Test',id:'executing-your-test',children:[]}]}];var layoutProps={rightToc:rightToc};var MDXLayout=\"wrapper\";function MDXContent(_ref){var components=_ref.components,props=Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(_ref,[\"components\"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(MDXLayout,Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({},layoutProps,props,{components:components,mdxType:\"MDXLayout\"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"div\",{\"className\":\"admonition admonition-warning alert alert--danger\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"div\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"div\"},{\"className\":\"admonition-heading\"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h5\",{parentName:\"div\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"span\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"h5\"},{\"className\":\"admonition-icon\"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"svg\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"span\"},{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"12\",\"height\":\"16\",\"viewBox\":\"0 0 12 16\"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"path\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"svg\"},{\"fillRule\":\"evenodd\",\"d\":\"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z\"})))),\"Only Available in TestObject\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"div\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"div\"},{\"className\":\"admonition-content\"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",{parentName:\"div\"},\"Espresso and XCUITest real device testing is supported on TestObject, our \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"p\"},{\"href\":\"https://wiki.saucelabs.com/pages/viewpage.action?pageId=102721177\"}),\"Legacy Real Device Cloud Platform\"),\", which you can access via \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"p\"},\"Sauce Apps\"),\" > \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"p\"},\"Legacy RDC\"),\".\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",{parentName:\"div\"},\"In early 2021, support will be moving from TestObject to Sauce Labs. See \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"p\"},{\"href\":\"https://wiki.saucelabs.com/display/DOCS/Real+Device+Testing+in+Sauce+Labs+Feature+Preview\"}),\"Real Device Testing in Sauce Labs Feature Preview\"),\" for more information.\"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Automated testing is included in the two most common integrated development environments (IDEs) used for making mobile apps:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"Android Studio, published by Google, provides automated testing capability by way of Espresso\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"XCode, the standard development environment for creating Apple iOS apps, uses XCUITest\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Our Sauce Runner for Real Devices test runner enables you to integrate Espresso and XCUITest with Sauce Labs real device testing. Leverage the power of our 2,000+ Android and iOS devices to run mobile app user interface (UI) tests, accelerate test execution with parallel testing, and gain immediate insight with test reporting comprised of video, screenshots, and logs.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h2\",{\"id\":\"what-youll-need\"},\"What You'll Need\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"To get started, you'll need to download and configure Sauce Runner for Real Devices, which is parameterized for use in your CI/CD environments. When you launch a test, the runner authenticates access to Espresso and XCUITest testing using the API key inside runner file. Finally, it validates your mobile app and test files before uploading to our real device cloud.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"The mobile app file (.ipa for iOS; .apk for Android) for both your app and tests\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"Set up your mobile app testing project (see \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"li\"},{\"href\":\"https://wiki.saucelabs.com/pages/viewpage.action?pageId=92677287\"}),\"Application and Project Management for Real Devices\"),\")\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h2\",{\"id\":\"system-requirements\"},\"System Requirements\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Minimum requirements for installing Sauce Runner for Real Devices:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"Java 8 or later installed on your local machine\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h2\",{\"id\":\"download\"},\"Download\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"p\"},{\"href\":\"https://s3.amazonaws.com/saucelabs-runner/v1.9/runner.jar\"}),\"Click here\"),\" to download the Sauce Runner for Real Devices .jar file.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h2\",{\"id\":\"configuration\"},\"Configuration\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Here's how to configure Sauce Runner for Real Devices with Espresso and XCUITest.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"ol\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ol\"},\"Choose one of the following commands to add to your code:\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",{parentName:\"li\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"inlineCode\",{parentName:\"p\"},\"xcuitest\"),\" Defines XCUITest as the test framework to use for your native iOS app tests\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",{parentName:\"li\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"inlineCode\",{parentName:\"p\"},\"espresso\"),\" Defines Espresso as the test framework to use for your native Android app tests\"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"ol\",{\"start\":2},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ol\"},\"Choose one of the following ways to set your test parameters:\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"li\"},\"Add command line options\"),\": see \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"li\"},{\"href\":\"/dev/cli/espresso-xcuitest\"}),\"Sauce Runner for Real Devices command line options\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"li\"},\"Create a YAML configuration file\"),\": see \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"li\"},{\"href\":\"/mobile-apps/automated-testing/espresso-xcuitest/example-configurations\"}),\"Example Configurations\"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h2\",{\"id\":\"using-espresso\"},\"Using Espresso\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"There are two ways you can run Espresso and UI Automator tests against Sauce Labs real devices:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"By using our test runner, which is parameterized for use in CI/CD environment\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"By using our \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"li\"},{\"href\":\"https://app.saucelabs.com\"}),\"web interface\"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h2\",{\"id\":\"using-xcuitest\"},\"Using XCUITest\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Once you've written your iOS app test in ObjectiveC/Swift, you'll need to build it as an .ipa file for use with Sauce Runner for Real Devices. For instructions, see \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"p\"},{\"href\":\"https://wiki.saucelabs.com/pages/viewpage.action?pageId=67767691\"}),\"Creating an .ipa File\"),\".\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Under \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"p\"},\"iOS Deployment Target\"),\", ensure that you set the same iOS version for both the app and your test runner. If these don't match, your tests will run locally, but fail when you run them against Sauce Labs real devices. From your Xcode \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"p\"},\"Build Settings\"),\":\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"ol\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ol\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",{parentName:\"li\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"p\"},\"Select Your App Project\"),\": Select the Project you want to build, and under Build Settings, set the iOS Deployment Target to the iOS operating system version you want to use in your test. All target outputs of this project, including the application and your test runner, will be set to the same operating system version.\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ol\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",{parentName:\"li\"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"p\"},\"Select Your App Target\"),\": Select the \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"p\"},\"Target\"),\" for your Project, and under \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"p\"},\"Build Settings\"),\", set the \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"p\"},\"iOS Deployment Target\"),\" to the iOS operating system version you want to use in your test. This will also overwrite the Build Settings at the Project level to that operating system version, so if you use this method, be aware that your Targets can become out of sync with each other and the Project settings, and your tests will break. If you change the iOS version for one target output, you may want to build the Project again to make sure all your targets are in sync.\"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h3\",{\"id\":\"executing-your-test\"},\"Executing Your Test\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Load and execute your .ipa file on the real mobile device, along with the app you're testing.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"strong\",{parentName:\"p\"},\"NOTE\"),\": The maximum execution time for a single XCUITest test is one hour. As a best practice, we recommend designing your tests as \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"p\"},{\"href\":\"https://wiki.saucelabs.com/pages/viewpage.action?pageId=48365933\"}),\"small, atomic, autonomous\"),\", and setting maximum execution times in minutes or seconds, so you can get the most efficiency for your builds.\"));};MDXContent.isMDXComponent=true;\n\n/***/ })\n\n}]);","inputSourceMap":null}