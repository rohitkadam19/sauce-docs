{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{212:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"MDXContext\",(function(){return u})),n.d(t,\"MDXProvider\",(function(){return p})),n.d(t,\"mdx\",(function(){return h})),n.d(t,\"useMDXComponents\",(function(){return d})),n.d(t,\"withMDXComponents\",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),m=function(e){return function(t){var n=d(t.components);return a.a.createElement(e,i({},t,{components:n}))}},d=function(e){var t=a.a.useContext(u),n=t;return e&&(n=\"function\"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=d(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},b={inlineCode:\"code\",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},f=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,[\"components\",\"mdxType\",\"originalType\",\"parentName\"]),u=d(n),m=r,p=u[\"\".concat(i,\".\").concat(m)]||u[m]||b[m]||o;return n?a.a.createElement(p,c(c({ref:t},s),{},{components:n})):a.a.createElement(p,c({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if(\"string\"==typeof e||r){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType=\"string\"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}f.displayName=\"MDXCreateElement\"},98:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"frontMatter\",(function(){return i})),n.d(t,\"metadata\",(function(){return s})),n.d(t,\"rightToc\",(function(){return c})),n.d(t,\"default\",(function(){return u}));var r=n(3),a=n(8),o=(n(0),n(212)),i={id:\"devices\",title:\"Choosing a Device for Mobile App Testing\",sidebar_label:\"Choosing a Device\"},s={unversionedId:\"mobile-apps/devices\",id:\"mobile-apps/devices\",isDocsHomePage:!1,title:\"Choosing a Device for Mobile App Testing\",description:\"Get the most out of your live and automated testing by including a healthy mix of emulators, simulators, and real devices as your mobile testing platforms. Why? Because there are aspects of the mobile experience that you can't test on emulators or simulators, such as location-based apps that use manufacturer-specific device sensors, memory consumption, and CPU usage.\",source:\"@site/docs/mobile-apps/devices.md\",slug:\"/mobile-apps/devices\",permalink:\"/mobile-apps/devices\",editUrl:\"https://github.com/saucelabs/sauce-docs/edit/master/docs/mobile-apps/devices.md\",version:\"current\",lastUpdatedBy:\"Kim\",lastUpdatedAt:1612778224,sidebar_label:\"Choosing a Device\",sidebar:\"someSidebar\",previous:{title:\"Mobile App Testing Features and Functionality\",permalink:\"/mobile-apps/features\"},next:{title:\"Mobile App Testing Admin Guide\",permalink:\"/mobile-apps/admin-guide\"}},c=[{value:\"When to Test on Real Devices\",id:\"when-to-test-on-real-devices\",children:[{value:\"System Requirements\",id:\"system-requirements\",children:[]}]},{value:\"When to Test on Emulators and Simulators\",id:\"when-to-test-on-emulators-and-simulators\",children:[]},{value:\"Additional Resources\",id:\"additional-resources\",children:[]}],l={rightToc:c};function u(e){var t=e.components,n=Object(a.default)(e,[\"components\"]);return Object(o.mdx)(\"wrapper\",Object(r.default)({},l,n,{components:t,mdxType:\"MDXLayout\"}),Object(o.mdx)(\"p\",null,\"Get the most out of your live and automated testing by including a healthy mix of emulators, simulators, and real devices as your mobile testing platforms. Why? Because there are aspects of the mobile experience that you can't test on emulators or simulators, such as location-based apps that use manufacturer-specific device sensors, memory consumption, and CPU usage.\"),Object(o.mdx)(\"p\",null,\"There are a variety of use cases to consider when you're deciding on the mix of emulators, simulators, and real devices to use in your testing.\"),Object(o.mdx)(\"h2\",{id:\"when-to-test-on-real-devices\"},\"When to Test on Real Devices\"),Object(o.mdx)(\"p\",null,\"If you need...\"),Object(o.mdx)(\"ul\",null,Object(o.mdx)(\"li\",{parentName:\"ul\"},\"Breadth of device types for panel/compatibility testing\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"To replicate an issue to match exact model as reported\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"Pixel-perfect display testing\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"To test hardware dependencies like CPU, memory, display, GPS\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"To test native ARM Libraries\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"To test on a custom OS (e.g., Samsung TouchWiz, OnePlus OxygenOS)\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"To test on a native framework like Espresso and Robotium\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"To test scenarios that require network connectivity (e.g., phone calls, send SMS messages)\")),Object(o.mdx)(\"p\",null,\"The Sauce Labs real device cloud provides you with the ability to run live and automated tests across Android and iOS devices. Some of the features that are specific to our real device cloud include:\"),Object(o.mdx)(\"ul\",null,Object(o.mdx)(\"li\",{parentName:\"ul\"},\"Manual testing on real devices\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"Choice of public real devices or private real devices unique to your organization\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"Support for Appium, Robotium, Espresso, and XCUITest frameworks\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"Support on hundreds of device/OS combinations\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"IPSec VPN secure connections to private device clouds\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"Devices cleaning process between sessions to ensure maximum privacy\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"Carrier Network Connectivity (devices with SIM cards)\")),Object(o.mdx)(\"h3\",{id:\"system-requirements\"},\"System Requirements\"),Object(o.mdx)(\"p\",null,\"See the \",Object(o.mdx)(\"a\",Object(r.default)({parentName:\"p\"},{href:\"https://wiki.saucelabs.com/display/DOCS/Mobile+Application+Testing+Admin+Guide\"}),\"Mobile Application Testing Admin Guide\"),\".\"),Object(o.mdx)(\"h2\",{id:\"when-to-test-on-emulators-and-simulators\"},\"When to Test on Emulators and Simulators\"),Object(o.mdx)(\"p\",null,\"If you need...\"),Object(o.mdx)(\"ul\",null,Object(o.mdx)(\"li\",{parentName:\"ul\"},\"Massive concurrency\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"To reduce build times\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"To save costs\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"Immediate availability\"),Object(o.mdx)(\"li\",{parentName:\"ul\"},\"Extremely low error rates for your test environment\")),Object(o.mdx)(\"h2\",{id:\"additional-resources\"},\"Additional Resources\"),Object(o.mdx)(\"p\",null,Object(o.mdx)(\"a\",Object(r.default)({parentName:\"p\"},{href:\"https://saucelabs.com/blog/how-to-choose-mobile-devices-for-testing\"}),\"Sauce Labs Blog: How to Choose Mobile Devices for Testing\")),Object(o.mdx)(\"p\",null,Object(o.mdx)(\"a\",Object(r.default)({parentName:\"p\"},{href:\"https://saucelabs.com/blog/better-together-real-devices-emulators-simulators-for-mobile-testing\"}),\"https://saucelabs.com/blog/better-together-real-devices-emulators-simulators-for-mobile-testing\")),Object(o.mdx)(\"p\",null,Object(o.mdx)(\"a\",Object(r.default)({parentName:\"p\"},{href:\"https://saucelabs.com/blog/mobile-testing-basics-manual-vs-automated-testing\"}),\"https://saucelabs.com/blog/mobile-testing-basics-manual-vs-automated-testing\")))}u.isMDXComponent=!0}}]);","name":"81cc6876.1cf0e2bf.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[64],{\n\n/***/ 212:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MDXContext\", function() { return MDXContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MDXProvider\", function() { return MDXProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mdx\", function() { return createElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useMDXComponents\", function() { return useMDXComponents; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"withMDXComponents\", function() { return withMDXComponents; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === 'function';\n};\n\nvar MDXContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = react__WEBPACK_IMPORTED_MODULE_0___default.a.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = 'mdxType';\nvar DEFAULTS = {\n  inlineCode: 'code',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, [\"components\", \"mdxType\", \"originalType\", \"parentName\"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components[\"\".concat(parentName, \".\").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = 'MDXCreateElement';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === 'string' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === 'string' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement.apply(null, createElementArgArray);\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement.apply(null, args);\n}\n\n\n\n\n/***/ }),\n\n/***/ 98:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frontMatter\", function() { return frontMatter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"metadata\", function() { return metadata; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rightToc\", function() { return rightToc; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MDXContent; });\n/* harmony import */ var _Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(212);\nvar frontMatter={id:'devices',title:'Choosing a Device for Mobile App Testing',sidebar_label:'Choosing a Device'};var metadata={\"unversionedId\":\"mobile-apps/devices\",\"id\":\"mobile-apps/devices\",\"isDocsHomePage\":false,\"title\":\"Choosing a Device for Mobile App Testing\",\"description\":\"Get the most out of your live and automated testing by including a healthy mix of emulators, simulators, and real devices as your mobile testing platforms. Why? Because there are aspects of the mobile experience that you can't test on emulators or simulators, such as location-based apps that use manufacturer-specific device sensors, memory consumption, and CPU usage.\",\"source\":\"@site/docs/mobile-apps/devices.md\",\"slug\":\"/mobile-apps/devices\",\"permalink\":\"/mobile-apps/devices\",\"editUrl\":\"https://github.com/saucelabs/sauce-docs/edit/master/docs/mobile-apps/devices.md\",\"version\":\"current\",\"lastUpdatedBy\":\"Kim\",\"lastUpdatedAt\":1612778224,\"sidebar_label\":\"Choosing a Device\",\"sidebar\":\"someSidebar\",\"previous\":{\"title\":\"Mobile App Testing Features and Functionality\",\"permalink\":\"/mobile-apps/features\"},\"next\":{\"title\":\"Mobile App Testing Admin Guide\",\"permalink\":\"/mobile-apps/admin-guide\"}};/* @jsxRuntime classic */ /* @jsx mdx */var rightToc=[{value:'When to Test on Real Devices',id:'when-to-test-on-real-devices',children:[{value:'System Requirements',id:'system-requirements',children:[]}]},{value:'When to Test on Emulators and Simulators',id:'when-to-test-on-emulators-and-simulators',children:[]},{value:'Additional Resources',id:'additional-resources',children:[]}];var layoutProps={rightToc:rightToc};var MDXLayout=\"wrapper\";function MDXContent(_ref){var components=_ref.components,props=Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref,[\"components\"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(MDXLayout,Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({},layoutProps,props,{components:components,mdxType:\"MDXLayout\"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"Get the most out of your live and automated testing by including a healthy mix of emulators, simulators, and real devices as your mobile testing platforms. Why? Because there are aspects of the mobile experience that you can't test on emulators or simulators, such as location-based apps that use manufacturer-specific device sensors, memory consumption, and CPU usage.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"There are a variety of use cases to consider when you're deciding on the mix of emulators, simulators, and real devices to use in your testing.\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h2\",{\"id\":\"when-to-test-on-real-devices\"},\"When to Test on Real Devices\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"If you need...\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"Breadth of device types for panel/compatibility testing\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"To replicate an issue to match exact model as reported\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"Pixel-perfect display testing\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"To test hardware dependencies like CPU, memory, display, GPS\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"To test native ARM Libraries\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"To test on a custom OS (e.g., Samsung TouchWiz, OnePlus OxygenOS)\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"To test on a native framework like Espresso and Robotium\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"To test scenarios that require network connectivity (e.g., phone calls, send SMS messages)\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"The Sauce Labs real device cloud provides you with the ability to run live and automated tests across Android and iOS devices. Some of the features that are specific to our real device cloud include:\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"Manual testing on real devices\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"Choice of public real devices or private real devices unique to your organization\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"Support for Appium, Robotium, Espresso, and XCUITest frameworks\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"Support on hundreds of device/OS combinations\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"IPSec VPN secure connections to private device clouds\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"Devices cleaning process between sessions to ensure maximum privacy\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"Carrier Network Connectivity (devices with SIM cards)\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h3\",{\"id\":\"system-requirements\"},\"System Requirements\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"See the \",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"p\"},{\"href\":\"https://wiki.saucelabs.com/display/DOCS/Mobile+Application+Testing+Admin+Guide\"}),\"Mobile Application Testing Admin Guide\"),\".\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h2\",{\"id\":\"when-to-test-on-emulators-and-simulators\"},\"When to Test on Emulators and Simulators\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,\"If you need...\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"ul\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"Massive concurrency\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"To reduce build times\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"To save costs\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"Immediate availability\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"li\",{parentName:\"ul\"},\"Extremely low error rates for your test environment\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"h2\",{\"id\":\"additional-resources\"},\"Additional Resources\"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"p\"},{\"href\":\"https://saucelabs.com/blog/how-to-choose-mobile-devices-for-testing\"}),\"Sauce Labs Blog: How to Choose Mobile Devices for Testing\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"p\"},{\"href\":\"https://saucelabs.com/blog/better-together-real-devices-emulators-simulators-for-mobile-testing\"}),\"https://saucelabs.com/blog/better-together-real-devices-emulators-simulators-for-mobile-testing\")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"p\",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__[\"mdx\"])(\"a\",Object(_Users_nancysweeney_GH_sauce_docs_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({parentName:\"p\"},{\"href\":\"https://saucelabs.com/blog/mobile-testing-basics-manual-vs-automated-testing\"}),\"https://saucelabs.com/blog/mobile-testing-basics-manual-vs-automated-testing\")));};MDXContent.isMDXComponent=true;\n\n/***/ })\n\n}]);","inputSourceMap":null}