{"remainingRequest":"/Users/nancysweeney/GH/sauce-docs/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/nancysweeney/GH/sauce-docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/nancysweeney/GH/sauce-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/nancysweeney/GH/sauce-docs/docs/basics/best-practices/handling-authentication.md","dependencies":[{"path":"/Users/nancysweeney/GH/sauce-docs/docs/basics/best-practices/handling-authentication.md","mtime":1612378019099},{"path":"/Users/nancysweeney/GH/sauce-docs/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-basics-best-practices-handling-authentication-md-c3a.json","mtime":1614090092231},{"path":"/Users/nancysweeney/GH/sauce-docs/node_modules/cache-loader/dist/cjs.js","mtime":1602877854626},{"path":"/Users/nancysweeney/GH/sauce-docs/node_modules/babel-loader/lib/index.js","mtime":1605895626604},{"path":"/Users/nancysweeney/GH/sauce-docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1613152382570},{"path":"/Users/nancysweeney/GH/sauce-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1613152382276}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}