"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const webpack_1 = __importDefault(require("webpack"));
;
function redocTheme(context, options) {
    return {
        name: 'docusaurus-theme-redoc',
        /**
         * @see https://github.com/Redocly/redoc/issues/1257
         */
        configureWebpack(config, isServer, utils) {
            return {
                plugins: [
                    new webpack_1.default.ProvidePlugin({
                        Buffer: ['buffer', 'Buffer'],
                    }),
                ],
            };
        },
        async contentLoaded({ content, actions }) {
            const { setGlobalData } = actions;
            // Create theme data global
            setGlobalData({
                baseTheme: {
                    colors: {
                        primary: {
                            main: options.primaryColor || "#25c2a0"
                        },
                    },
                },
            });
        },
        getThemePath() {
            return path_1.default.join(__dirname, '..', 'dist-jsx', 'theme');
        },
        getTypeScriptThemePath() {
            return path_1.default.join(__dirname, '..', 'src', 'theme');
        },
        getSwizzleComponentList() {
            return ['Redoc', 'ApiDoc'];
        },
        getClientModules() {
            return [path_1.default.join(__dirname, 'custom.css')];
        },
    };
}
exports.default = redocTheme;
;
//# sourceMappingURL=index.js.map